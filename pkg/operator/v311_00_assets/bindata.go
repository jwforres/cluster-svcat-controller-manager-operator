// Code generated by go-bindata.
// sources:
// bindata/v3.11.0/openshift-svcat-apiserver/apiserver-clusterrolebinding.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/cm.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/cr1.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/cr10.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/cr2.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/cr3.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/cr4.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/cr7.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/cr8.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/cr9.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/crb1.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/crb2.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/crb3.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/crb4.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/crb5.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/crb6.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/crb7.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/defaultconfig.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/ds.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/ns.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/operator-config.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/role1.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/role1.yaml~
// bindata/v3.11.0/openshift-svcat-apiserver/role2.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/role3.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/roleb1.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/roleb2.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/roleb3.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/sa.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/sa1.yaml
// bindata/v3.11.0/openshift-svcat-apiserver/sa1.yaml~
// bindata/v3.11.0/openshift-svcat-apiserver/svc.yaml
// DO NOT EDIT!

package v311_00_assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _v3110OpenshiftSvcatApiserverApiserverClusterrolebindingYaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: servicecatalog-serviceclass-viewer
rules:
- apiGroups:
  - servicecatalog.k8s.io
  resources:
  - clusterserviceclasses
  - clusterserviceplans
  verbs:
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: servicecatalog-serviceclass-viewer-binding
roleRef:
  kind: ClusterRole
  name: servicecatalog-serviceclass-viewer
subjects:
- kind: Group
  name: system:authenticated
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: service-catalog-controller
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: service-catalog-apiserver
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sar-creator
rules:
- apiGroups:
  - ""
  resources:
  - subjectaccessreviews.authorization.k8s.io
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-catalog-sar-creator-binding
roleRef:
  kind: ClusterRole
  name: sar-creator
subjects:
- kind: ServiceAccount
  name: service-catalog-apiserver
  namespace: kube-service-catalog
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: namespace-viewer
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "admissionregistration.k8s.io"
  resources:
  - validatingwebhookconfigurations
  - mutatingwebhookconfigurations
  verbs:
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-catalog-namespace-viewer-binding
roleRef:
  kind: ClusterRole
  name: namespace-viewer
subjects:
- kind: ServiceAccount
  name: service-catalog-apiserver
  namespace: kube-service-catalog
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-catalog-controller-namespace-viewer-binding
roleRef:
  kind: ClusterRole
  name: namespace-viewer
subjects:
- kind: ServiceAccount
  name: service-catalog-controller
  namespace: kube-service-catalog
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: service-catalog-controller
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - update
  - patch
  - delete
  - get
  - list
  - watch
- apiGroups:
  - servicecatalog.k8s.io
  resources:
  - clusterservicebrokers/status
  - clusterserviceclasses/status
  - clusterserviceplans/status
  - serviceinstances/status
  - servicebindings/status
  - servicebindings/finalizers
  - serviceinstances/reference
  - servicebrokers/status
  - serviceclasses/status
  - serviceplans/status
  verbs:
  - update
- apiGroups:
  - servicecatalog.k8s.io
  resources:
  - clusterservicebrokers
  - serviceinstances
  - servicebindings
  - servicebrokers
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - patch
  - create
- apiGroups:
  - servicecatalog.k8s.io
  resources:
  - clusterserviceclasses
  - clusterserviceplans
  - serviceclasses
  - serviceplans
  verbs:
  - create
  - delete
  - update
  - patch
  - get
  - list
  - watch
- apiGroups:
  - settings.k8s.io
  resources:
  - podpresets
  verbs:
  - create
  - update
  - delete
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-catalog-controller-binding
roleRef:
  kind: ClusterRole
  name: service-catalog-controller
subjects:
- kind: ServiceAccount
  name: service-catalog-controller
  namespace: kube-service-catalog
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: configmap-accessor
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - list
  - watch
  - get
  - create
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: configmap-accessor-binding
  namespace: kube-service-catalog
roleRef:
  kind: Role
  name: configmap-accessor
subjects:
- kind: ServiceAccount
  namespace: kube-service-catalog
  name: service-catalog-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cluster-info-configmap
  namespace: kube-service-catalog
rules:
- apiGroups:     [""]
  resources:     ["configmaps"]
  resourceNames: ["cluster-info"]
  verbs:         ["get","create","list","watch","update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cluster-info-configmap-binding
  namespace: kube-service-catalog
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cluster-info-configmap
subjects:
- kind: ServiceAccount
  namespace: kube-service-catalog
  name: service-catalog-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:auth-delegator-binding
roleRef:
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: service-catalog-apiserver
  namespace: kube-service-catalog
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: servicecatalog.k8s.io:service-catalog-readiness
rules:
- nonResourceURLs:
  - /healthz/ready
  verbs:
    - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: servicecatalog.k8s.io:service-catalog-readiness
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: servicecatalog.k8s.io:service-catalog-readiness
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:unauthenticated
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: extension-apiserver-authentication-reader
  namespace: kube-system
rules:
- apiGroups:
  - ""
  resourceNames:
  - extension-apiserver-authentication
  resources:
  - configmaps
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: extension-apiserver-authentication-reader-binding
  namespace: kube-system
roleRef:
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: service-catalog-apiserver
  namespace: kube-service-catalog
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: system:service-catalog:aggregate-to-admin
rules:
- apiGroups:
  - "servicecatalog.k8s.io"
  attributeRestrictions: null
  resources:
  - servicebrokers
  - serviceclasses
  - serviceplans
  - serviceinstances
  - servicebindings
  verbs:
  - create
  - update
  - delete
  - get
  - list
  - watch
  - patch
- apiGroups:
  - "settings.k8s.io"
  attributeRestrictions: null
  resources:
  - podpresets
  verbs:
  - create
  - update
  - delete
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: system:service-catalog:aggregate-to-edit
rules:
- apiGroups:
  - "servicecatalog.k8s.io"
  attributeRestrictions: null
  resources:
  - servicebrokers
  - serviceclasses
  - serviceplans
  - serviceinstances
  - servicebindings
  verbs:
  - create
  - update
  - delete
  - get
  - list
  - watch
  - patch
- apiGroups:
  - "settings.k8s.io"
  attributeRestrictions: null
  resources:
  - podpresets
  verbs:
  - create
  - update
  - delete
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: system:service-catalog:aggregate-to-view
rules:
- apiGroups:
  - "servicecatalog.k8s.io"
  attributeRestrictions: null
  resources:
  - servicebrokers
  - serviceclasses
  - serviceplans
  - serviceinstances
  - servicebindings
  verbs:
  - get
  - list
  - watch
`)

func v3110OpenshiftSvcatApiserverApiserverClusterrolebindingYamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverApiserverClusterrolebindingYaml, nil
}

func v3110OpenshiftSvcatApiserverApiserverClusterrolebindingYaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverApiserverClusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/apiserver-clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCmYaml = []byte(`apiVersion: v1
kind: ConfigMap
metadata:
  namespace: kube-service-catalog
  name: config
data:
  config.yaml:
`)

func v3110OpenshiftSvcatApiserverCmYamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCmYaml, nil
}

func v3110OpenshiftSvcatApiserverCmYaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/cm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCr1Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: servicecatalog-serviceclass-viewer
rules:
- apiGroups:
  - servicecatalog.k8s.io
  resources:
  - clusterserviceclasses
  - clusterserviceplans
  verbs:
  - list
  - watch
  - get
`)

func v3110OpenshiftSvcatApiserverCr1YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCr1Yaml, nil
}

func v3110OpenshiftSvcatApiserverCr1Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCr1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/cr1.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCr10Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: system:service-catalog:aggregate-to-view
rules:
- apiGroups:
  - "servicecatalog.k8s.io"
  attributeRestrictions: null
  resources:
  - servicebrokers
  - serviceclasses
  - serviceplans
  - serviceinstances
  - servicebindings
  verbs:
  - get
  - list
  - watch
`)

func v3110OpenshiftSvcatApiserverCr10YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCr10Yaml, nil
}

func v3110OpenshiftSvcatApiserverCr10Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCr10YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/cr10.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCr2Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sar-creator
rules:
- apiGroups:
  - ""
  resources:
  - subjectaccessreviews.authorization.k8s.io
  verbs:
  - create
`)

func v3110OpenshiftSvcatApiserverCr2YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCr2Yaml, nil
}

func v3110OpenshiftSvcatApiserverCr2Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCr2YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/cr2.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCr3Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: namespace-viewer
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "admissionregistration.k8s.io"
  resources:
  - validatingwebhookconfigurations
  - mutatingwebhookconfigurations
  verbs:
  - list
  - watch
  - get
`)

func v3110OpenshiftSvcatApiserverCr3YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCr3Yaml, nil
}

func v3110OpenshiftSvcatApiserverCr3Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCr3YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/cr3.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCr4Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: service-catalog-controller
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - update
  - patch
  - delete
  - get
  - list
  - watch
- apiGroups:
  - servicecatalog.k8s.io
  resources:
  - clusterservicebrokers/status
  - clusterserviceclasses/status
  - clusterserviceplans/status
  - serviceinstances/status
  - servicebindings/status
  - servicebindings/finalizers
  - serviceinstances/reference
  - servicebrokers/status
  - serviceclasses/status
  - serviceplans/status
  verbs:
  - update
- apiGroups:
  - servicecatalog.k8s.io
  resources:
  - clusterservicebrokers
  - serviceinstances
  - servicebindings
  - servicebrokers
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - patch
  - create
- apiGroups:
  - servicecatalog.k8s.io
  resources:
  - clusterserviceclasses
  - clusterserviceplans
  - serviceclasses
  - serviceplans
  verbs:
  - create
  - delete
  - update
  - patch
  - get
  - list
  - watch
- apiGroups:
  - settings.k8s.io
  resources:
  - podpresets
  verbs:
  - create
  - update
  - delete
  - get
  - list
  - watch
`)

func v3110OpenshiftSvcatApiserverCr4YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCr4Yaml, nil
}

func v3110OpenshiftSvcatApiserverCr4Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCr4YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/cr4.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCr7Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: servicecatalog.k8s.io:service-catalog-readiness
rules:
- nonResourceURLs:
  - /healthz/ready
  verbs:
    - get
`)

func v3110OpenshiftSvcatApiserverCr7YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCr7Yaml, nil
}

func v3110OpenshiftSvcatApiserverCr7Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCr7YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/cr7.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCr8Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: system:service-catalog:aggregate-to-admin
rules:
- apiGroups:
  - "servicecatalog.k8s.io"
  attributeRestrictions: null
  resources:
  - servicebrokers
  - serviceclasses
  - serviceplans
  - serviceinstances
  - servicebindings
  verbs:
  - create
  - update
  - delete
  - get
  - list
  - watch
  - patch
- apiGroups:
  - "settings.k8s.io"
  attributeRestrictions: null
  resources:
  - podpresets
  verbs:
  - create
  - update
  - delete
  - get
  - list
  - watch
`)

func v3110OpenshiftSvcatApiserverCr8YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCr8Yaml, nil
}

func v3110OpenshiftSvcatApiserverCr8Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCr8YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/cr8.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCr9Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: system:service-catalog:aggregate-to-edit
rules:
- apiGroups:
  - "servicecatalog.k8s.io"
  attributeRestrictions: null
  resources:
  - servicebrokers
  - serviceclasses
  - serviceplans
  - serviceinstances
  - servicebindings
  verbs:
  - create
  - update
  - delete
  - get
  - list
  - watch
  - patch
- apiGroups:
  - "settings.k8s.io"
  attributeRestrictions: null
  resources:
  - podpresets
  verbs:
  - create
  - update
  - delete
  - get
  - list
  - watch
`)

func v3110OpenshiftSvcatApiserverCr9YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCr9Yaml, nil
}

func v3110OpenshiftSvcatApiserverCr9Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCr9YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/cr9.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCrb1Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: servicecatalog-serviceclass-viewer-binding
roleRef:
  kind: ClusterRole
  name: servicecatalog-serviceclass-viewer
subjects:
- kind: Group
  name: system:authenticated
`)

func v3110OpenshiftSvcatApiserverCrb1YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCrb1Yaml, nil
}

func v3110OpenshiftSvcatApiserverCrb1Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCrb1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/crb1.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCrb2Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-catalog-sar-creator-binding
roleRef:
  kind: ClusterRole
  name: sar-creator
subjects:
- kind: ServiceAccount
  name: service-catalog-apiserver
  namespace: kube-service-catalog
`)

func v3110OpenshiftSvcatApiserverCrb2YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCrb2Yaml, nil
}

func v3110OpenshiftSvcatApiserverCrb2Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCrb2YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/crb2.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCrb3Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-catalog-namespace-viewer-binding
roleRef:
  kind: ClusterRole
  name: namespace-viewer
subjects:
- kind: ServiceAccount
  name: service-catalog-apiserver
  namespace: kube-service-catalog
`)

func v3110OpenshiftSvcatApiserverCrb3YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCrb3Yaml, nil
}

func v3110OpenshiftSvcatApiserverCrb3Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCrb3YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/crb3.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCrb4Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-catalog-controller-namespace-viewer-binding
roleRef:
  kind: ClusterRole
  name: namespace-viewer
subjects:
- kind: ServiceAccount
  name: service-catalog-controller
  namespace: kube-service-catalog
`)

func v3110OpenshiftSvcatApiserverCrb4YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCrb4Yaml, nil
}

func v3110OpenshiftSvcatApiserverCrb4Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCrb4YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/crb4.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCrb5Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: service-catalog-controller-binding
roleRef:
  kind: ClusterRole
  name: service-catalog-controller
subjects:
- kind: ServiceAccount
  name: service-catalog-controller
  namespace: kube-service-catalog
`)

func v3110OpenshiftSvcatApiserverCrb5YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCrb5Yaml, nil
}

func v3110OpenshiftSvcatApiserverCrb5Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCrb5YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/crb5.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCrb6Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:auth-delegator-binding
roleRef:
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: service-catalog-apiserver
  namespace: kube-service-catalog
`)

func v3110OpenshiftSvcatApiserverCrb6YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCrb6Yaml, nil
}

func v3110OpenshiftSvcatApiserverCrb6Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCrb6YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/crb6.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverCrb7Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: servicecatalog.k8s.io:service-catalog-readiness
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: servicecatalog.k8s.io:service-catalog-readiness
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:unauthenticated
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
`)

func v3110OpenshiftSvcatApiserverCrb7YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverCrb7Yaml, nil
}

func v3110OpenshiftSvcatApiserverCrb7Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverCrb7YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/crb7.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverDefaultconfigYaml = []byte(`apiVersion: openshiftcontrolplane.config.openshift.io/v1
kind: OpenShiftAPIServerConfig
aggregatorConfig:

`)

func v3110OpenshiftSvcatApiserverDefaultconfigYamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverDefaultconfigYaml, nil
}

func v3110OpenshiftSvcatApiserverDefaultconfigYaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverDefaultconfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/defaultconfig.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverDsYaml = []byte(`apiVersion: "apps/v1"
kind: DaemonSet
metadata:
  labels:
    app: apiserver
  name: apiserver
  namespace: kube-service-catalog
spec:
  selector:
    matchLabels:
      app: apiserver
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: apiserver
    spec:
      serviceAccountName: service-catalog-apiserver
      nodeSelector:
        node-role.kubernetes.io/master: ""
      containers:
      - args:
        - apiserver
        - --storage-type
        - etcd
        - --secure-port
        - "6443"
        - --etcd-servers
        - "https://etcd.kube-system.svc.cluster.local:2379"
        - --etcd-cafile
        - "/var/run/configmaps/etcd-serving-ca/ca-bundle.crt"
        - --etcd-certfile
        - "/var/run/secrets/etcd-client/tls.crt"
        - --etcd-keyfile
        - "/var/run/secrets/etcd-client/tls.key"
        - -v
        - "9"
        - --cors-allowed-origins
        - "localhost"
        - --enable-admission-plugins
        - NamespaceLifecycle,DefaultServicePlan,ServiceBindingsLifecycle,ServicePlanChangeValidator,BrokerAuthSarCheck
        - --feature-gates
        - OriginatingIdentity=true
        - --feature-gates
        - NamespacedServiceBroker=true
        image: ${IMAGE}
        imagePullPolicy: IfNotPresent
        command: ["/usr/bin/service-catalog"]
        name: apiserver
        ports:
        - containerPort: 6443
          protocol: TCP
        resources:
          requests:
            memory: 200Mi
        terminationMessagePath: /dev/termination-log
        volumeMounts:
        - mountPath: /var/run/kubernetes-service-catalog
          name: apiserver-ssl
          readOnly: true
        - mountPath: /etc/origin/master
          name: etcd-host-cert
          readOnly: true
        - mountPath: /var/run/secrets/etcd-client
          name: etcd-client
        - mountPath: /var/run/configmaps/etcd-serving-ca
          name: etcd-serving-ca
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: apiserver-ssl
        secret:
          defaultMode: 420
          secretName: serving-cert
          items:
          - key: tls.crt
            path: apiserver.crt
          - key: tls.key
            path: apiserver.key
      - hostPath:
          path: /etc/origin/master
        name: etcd-host-cert
      - emptyDir: {}
        name: data-dir
      - name: etcd-serving-ca
        configMap:
          name: etcd-serving-ca
      - name: etcd-client
        secret:
          secretName: etcd-client
      tolerations:
      - operator: Exists`)

func v3110OpenshiftSvcatApiserverDsYamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverDsYaml, nil
}

func v3110OpenshiftSvcatApiserverDsYaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/ds.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverNsYaml = []byte(`apiVersion: v1
kind: Namespace
metadata:
  name: kube-service-catalog
  labels:
    openshift.io/run-level: "1"`)

func v3110OpenshiftSvcatApiserverNsYamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverNsYaml, nil
}

func v3110OpenshiftSvcatApiserverNsYaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverNsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/ns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverOperatorConfigYaml = []byte(`apiVersion: operator.openshift.io/v1
kind: OpenShiftAPIServer
metadata:
  name: svcat
spec:
  logLevel: "Debug"
  managementState: Managed
  observedConfig:
    imagePolicyConfig:
      internalRegistryHostname: image-registry.openshift-image-registry.svc:5000
    routingConfig:
      subdomain: apps.jaboyd-0208.devcluster.openshift.com
  operandSpecs: null
  unsupportedConfigOverrides: null`)

func v3110OpenshiftSvcatApiserverOperatorConfigYamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverOperatorConfigYaml, nil
}

func v3110OpenshiftSvcatApiserverOperatorConfigYaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverOperatorConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/operator-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverRole1Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: configmap-accessor
  namespace: kube-service-catalog
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - list
  - watch
  - get
  - create
  - update
`)

func v3110OpenshiftSvcatApiserverRole1YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverRole1Yaml, nil
}

func v3110OpenshiftSvcatApiserverRole1Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverRole1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/role1.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverRole1Yaml2 = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: configmap-accessor
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - list
  - watch
  - get
  - create
  - update
`)

func v3110OpenshiftSvcatApiserverRole1Yaml2Bytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverRole1Yaml2, nil
}

func v3110OpenshiftSvcatApiserverRole1Yaml2() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverRole1Yaml2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/role1.yaml~", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverRole2Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cluster-info-configmap
  namespace: kube-service-catalog
rules:
- apiGroups:     [""]
  resources:     ["configmaps"]
  resourceNames: ["cluster-info"]
  verbs:         ["get","create","list","watch","update"]
`)

func v3110OpenshiftSvcatApiserverRole2YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverRole2Yaml, nil
}

func v3110OpenshiftSvcatApiserverRole2Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverRole2YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/role2.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverRole3Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: extension-apiserver-authentication-reader
  namespace: kube-system
rules:
- apiGroups:
  - ""
  resourceNames:
  - extension-apiserver-authentication
  resources:
  - configmaps
  verbs:
  - get
`)

func v3110OpenshiftSvcatApiserverRole3YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverRole3Yaml, nil
}

func v3110OpenshiftSvcatApiserverRole3Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverRole3YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/role3.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverRoleb1Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: configmap-accessor-binding
  namespace: kube-service-catalog
roleRef:
  kind: Role
  name: configmap-accessor
subjects:
- kind: ServiceAccount
  namespace: kube-service-catalog
  name: service-catalog-controller
`)

func v3110OpenshiftSvcatApiserverRoleb1YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverRoleb1Yaml, nil
}

func v3110OpenshiftSvcatApiserverRoleb1Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverRoleb1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/roleb1.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverRoleb2Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cluster-info-configmap-binding
  namespace: kube-service-catalog
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cluster-info-configmap
subjects:
- kind: ServiceAccount
  namespace: kube-service-catalog
  name: service-catalog-controller
`)

func v3110OpenshiftSvcatApiserverRoleb2YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverRoleb2Yaml, nil
}

func v3110OpenshiftSvcatApiserverRoleb2Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverRoleb2YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/roleb2.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverRoleb3Yaml = []byte(`apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: extension-apiserver-authentication-reader-binding
  namespace: kube-system
roleRef:
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: service-catalog-apiserver
  namespace: kube-service-catalog
`)

func v3110OpenshiftSvcatApiserverRoleb3YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverRoleb3Yaml, nil
}

func v3110OpenshiftSvcatApiserverRoleb3Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverRoleb3YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/roleb3.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverSaYaml = []byte(`apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: kube-service-catalog
  name: service-catalog-apiserver
`)

func v3110OpenshiftSvcatApiserverSaYamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverSaYaml, nil
}

func v3110OpenshiftSvcatApiserverSaYaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverSaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/sa.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverSa1Yaml = []byte(`kind: ServiceAccount
apiVersion: v1
metadata:
  name: service-catalog-controller
  namespace: kube-service-catalog
`)

func v3110OpenshiftSvcatApiserverSa1YamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverSa1Yaml, nil
}

func v3110OpenshiftSvcatApiserverSa1Yaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverSa1YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/sa1.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverSa1Yaml2 = []byte(`kind: ServiceAccount
apiVersion: v1
metadata:
  name: service-catalog-controller
`)

func v3110OpenshiftSvcatApiserverSa1Yaml2Bytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverSa1Yaml2, nil
}

func v3110OpenshiftSvcatApiserverSa1Yaml2() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverSa1Yaml2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/sa1.yaml~", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _v3110OpenshiftSvcatApiserverSvcYaml = []byte(`apiVersion: v1
kind: Service
metadata:
  namespace: kube-service-catalog
  name: api
  annotations:
    service.alpha.openshift.io/serving-cert-secret-name: serving-cert
    prometheus.io/scrape: "true"
    prometheus.io/scheme: https
spec:
  selector:
    app: apiserver
  ports:
  - name: https
    port: 443
    targetPort: 6443
`)

func v3110OpenshiftSvcatApiserverSvcYamlBytes() ([]byte, error) {
	return _v3110OpenshiftSvcatApiserverSvcYaml, nil
}

func v3110OpenshiftSvcatApiserverSvcYaml() (*asset, error) {
	bytes, err := v3110OpenshiftSvcatApiserverSvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "v3.11.0/openshift-svcat-apiserver/svc.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"v3.11.0/openshift-svcat-apiserver/apiserver-clusterrolebinding.yaml": v3110OpenshiftSvcatApiserverApiserverClusterrolebindingYaml,
	"v3.11.0/openshift-svcat-apiserver/cm.yaml":                           v3110OpenshiftSvcatApiserverCmYaml,
	"v3.11.0/openshift-svcat-apiserver/cr1.yaml":                          v3110OpenshiftSvcatApiserverCr1Yaml,
	"v3.11.0/openshift-svcat-apiserver/cr10.yaml":                         v3110OpenshiftSvcatApiserverCr10Yaml,
	"v3.11.0/openshift-svcat-apiserver/cr2.yaml":                          v3110OpenshiftSvcatApiserverCr2Yaml,
	"v3.11.0/openshift-svcat-apiserver/cr3.yaml":                          v3110OpenshiftSvcatApiserverCr3Yaml,
	"v3.11.0/openshift-svcat-apiserver/cr4.yaml":                          v3110OpenshiftSvcatApiserverCr4Yaml,
	"v3.11.0/openshift-svcat-apiserver/cr7.yaml":                          v3110OpenshiftSvcatApiserverCr7Yaml,
	"v3.11.0/openshift-svcat-apiserver/cr8.yaml":                          v3110OpenshiftSvcatApiserverCr8Yaml,
	"v3.11.0/openshift-svcat-apiserver/cr9.yaml":                          v3110OpenshiftSvcatApiserverCr9Yaml,
	"v3.11.0/openshift-svcat-apiserver/crb1.yaml":                         v3110OpenshiftSvcatApiserverCrb1Yaml,
	"v3.11.0/openshift-svcat-apiserver/crb2.yaml":                         v3110OpenshiftSvcatApiserverCrb2Yaml,
	"v3.11.0/openshift-svcat-apiserver/crb3.yaml":                         v3110OpenshiftSvcatApiserverCrb3Yaml,
	"v3.11.0/openshift-svcat-apiserver/crb4.yaml":                         v3110OpenshiftSvcatApiserverCrb4Yaml,
	"v3.11.0/openshift-svcat-apiserver/crb5.yaml":                         v3110OpenshiftSvcatApiserverCrb5Yaml,
	"v3.11.0/openshift-svcat-apiserver/crb6.yaml":                         v3110OpenshiftSvcatApiserverCrb6Yaml,
	"v3.11.0/openshift-svcat-apiserver/crb7.yaml":                         v3110OpenshiftSvcatApiserverCrb7Yaml,
	"v3.11.0/openshift-svcat-apiserver/defaultconfig.yaml":                v3110OpenshiftSvcatApiserverDefaultconfigYaml,
	"v3.11.0/openshift-svcat-apiserver/ds.yaml":                           v3110OpenshiftSvcatApiserverDsYaml,
	"v3.11.0/openshift-svcat-apiserver/ns.yaml":                           v3110OpenshiftSvcatApiserverNsYaml,
	"v3.11.0/openshift-svcat-apiserver/operator-config.yaml":              v3110OpenshiftSvcatApiserverOperatorConfigYaml,
	"v3.11.0/openshift-svcat-apiserver/role1.yaml":                        v3110OpenshiftSvcatApiserverRole1Yaml,
	"v3.11.0/openshift-svcat-apiserver/role1.yaml~":                       v3110OpenshiftSvcatApiserverRole1Yaml2,
	"v3.11.0/openshift-svcat-apiserver/role2.yaml":                        v3110OpenshiftSvcatApiserverRole2Yaml,
	"v3.11.0/openshift-svcat-apiserver/role3.yaml":                        v3110OpenshiftSvcatApiserverRole3Yaml,
	"v3.11.0/openshift-svcat-apiserver/roleb1.yaml":                       v3110OpenshiftSvcatApiserverRoleb1Yaml,
	"v3.11.0/openshift-svcat-apiserver/roleb2.yaml":                       v3110OpenshiftSvcatApiserverRoleb2Yaml,
	"v3.11.0/openshift-svcat-apiserver/roleb3.yaml":                       v3110OpenshiftSvcatApiserverRoleb3Yaml,
	"v3.11.0/openshift-svcat-apiserver/sa.yaml":                           v3110OpenshiftSvcatApiserverSaYaml,
	"v3.11.0/openshift-svcat-apiserver/sa1.yaml":                          v3110OpenshiftSvcatApiserverSa1Yaml,
	"v3.11.0/openshift-svcat-apiserver/sa1.yaml~":                         v3110OpenshiftSvcatApiserverSa1Yaml2,
	"v3.11.0/openshift-svcat-apiserver/svc.yaml":                          v3110OpenshiftSvcatApiserverSvcYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"v3.11.0": {nil, map[string]*bintree{
		"openshift-svcat-apiserver": {nil, map[string]*bintree{
			"apiserver-clusterrolebinding.yaml": {v3110OpenshiftSvcatApiserverApiserverClusterrolebindingYaml, map[string]*bintree{}},
			"cm.yaml":                           {v3110OpenshiftSvcatApiserverCmYaml, map[string]*bintree{}},
			"cr1.yaml":                          {v3110OpenshiftSvcatApiserverCr1Yaml, map[string]*bintree{}},
			"cr10.yaml":                         {v3110OpenshiftSvcatApiserverCr10Yaml, map[string]*bintree{}},
			"cr2.yaml":                          {v3110OpenshiftSvcatApiserverCr2Yaml, map[string]*bintree{}},
			"cr3.yaml":                          {v3110OpenshiftSvcatApiserverCr3Yaml, map[string]*bintree{}},
			"cr4.yaml":                          {v3110OpenshiftSvcatApiserverCr4Yaml, map[string]*bintree{}},
			"cr7.yaml":                          {v3110OpenshiftSvcatApiserverCr7Yaml, map[string]*bintree{}},
			"cr8.yaml":                          {v3110OpenshiftSvcatApiserverCr8Yaml, map[string]*bintree{}},
			"cr9.yaml":                          {v3110OpenshiftSvcatApiserverCr9Yaml, map[string]*bintree{}},
			"crb1.yaml":                         {v3110OpenshiftSvcatApiserverCrb1Yaml, map[string]*bintree{}},
			"crb2.yaml":                         {v3110OpenshiftSvcatApiserverCrb2Yaml, map[string]*bintree{}},
			"crb3.yaml":                         {v3110OpenshiftSvcatApiserverCrb3Yaml, map[string]*bintree{}},
			"crb4.yaml":                         {v3110OpenshiftSvcatApiserverCrb4Yaml, map[string]*bintree{}},
			"crb5.yaml":                         {v3110OpenshiftSvcatApiserverCrb5Yaml, map[string]*bintree{}},
			"crb6.yaml":                         {v3110OpenshiftSvcatApiserverCrb6Yaml, map[string]*bintree{}},
			"crb7.yaml":                         {v3110OpenshiftSvcatApiserverCrb7Yaml, map[string]*bintree{}},
			"defaultconfig.yaml":                {v3110OpenshiftSvcatApiserverDefaultconfigYaml, map[string]*bintree{}},
			"ds.yaml":                           {v3110OpenshiftSvcatApiserverDsYaml, map[string]*bintree{}},
			"ns.yaml":                           {v3110OpenshiftSvcatApiserverNsYaml, map[string]*bintree{}},
			"operator-config.yaml":              {v3110OpenshiftSvcatApiserverOperatorConfigYaml, map[string]*bintree{}},
			"role1.yaml":                        {v3110OpenshiftSvcatApiserverRole1Yaml, map[string]*bintree{}},
			"role1.yaml~":                       {v3110OpenshiftSvcatApiserverRole1Yaml2, map[string]*bintree{}},
			"role2.yaml":                        {v3110OpenshiftSvcatApiserverRole2Yaml, map[string]*bintree{}},
			"role3.yaml":                        {v3110OpenshiftSvcatApiserverRole3Yaml, map[string]*bintree{}},
			"roleb1.yaml":                       {v3110OpenshiftSvcatApiserverRoleb1Yaml, map[string]*bintree{}},
			"roleb2.yaml":                       {v3110OpenshiftSvcatApiserverRoleb2Yaml, map[string]*bintree{}},
			"roleb3.yaml":                       {v3110OpenshiftSvcatApiserverRoleb3Yaml, map[string]*bintree{}},
			"sa.yaml":                           {v3110OpenshiftSvcatApiserverSaYaml, map[string]*bintree{}},
			"sa1.yaml":                          {v3110OpenshiftSvcatApiserverSa1Yaml, map[string]*bintree{}},
			"sa1.yaml~":                         {v3110OpenshiftSvcatApiserverSa1Yaml2, map[string]*bintree{}},
			"svc.yaml":                          {v3110OpenshiftSvcatApiserverSvcYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
